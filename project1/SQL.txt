create table ers_reimbursement_status (
	reimb_status_id serial primary key,
	reimb_status varchar(10) not null
	--reimb_status_pk integer not null
	--reimb_status_pk integer references ers_reimbursement_status (reimb_status_id) not null
);

create table ers_reimbursement_type (
	reimb_type_id serial primary key,
	reimb_type varchar(10) not null
	--reimb_type_pk integer not null
	--reimb_type_pk integer references ers_reimbursement_type (reimb_type_id) not null
);

create table ers_user_roles (
	ers_user_role_id serial primary key,
	user_role varchar(10) not null
	--ers_user_roles_pk integer not null
	--ers_user_roles_pk integer references ers_user_roles (ers_user_role_id) not null
);

create table ers_reimbursement (
	reimb_id serial primary key,
	reimb_amount numeric (8, 1) not null,
	reimb_submitted timestamp not null,
	reimb_resolved timestamp, --depends on manager
	reimb_description varchar(250) not null,
	reimb_receipt bytea,
	reimb_author integer not null,
	reimb_resolver integer,
	--reimb_status_id integer not null,
	--reimb_type_id integer not null
	reimb_status_id integer not null,
	reimb_type_id integer not null
	--reimb_status_id integer references ers_reimbursement_status (reimb_status_id) not null,
	--reimb_type_id integer references ers_reimbursement_type (reimb_type_id) not null
	--item_time timestamp not null
);

create table ers_users (
	ers_users_id serial primary key,
	ers_username varchar(50) not null,
	ers_password varchar(50) not null,
	user_first_name varchar(100) not null,
	user_last_name varchar(100) not null,
	user_email varchar(150) not null,
	user_role_id integer not null
	--user_role_id integer references ers_user_roles (ers_user_role_id) not null
);
-- make some column changes 
--ALTER TABLE ers_reimbursement ALTER COLUMN reimb_resolver DROP NOT NULL;
ALTER TABLE ers_reimbursement ALTER COLUMN reimb_submitted SET DEFAULT now();
--some user data
insert into ers_users (ers_username, ers_password , user_first_name, user_last_name, user_email, user_role_id) values ('john', '123', 'john', 'doe', 'john@gmail.com', 1);
insert into ers_users (ers_username, ers_password , user_first_name, user_last_name, user_email, user_role_id) values ('will', '456', 'will', 'smith', 'will@gmail.com', 1);
insert into ers_users (ers_username, ers_password , user_first_name, user_last_name, user_email, user_role_id) values ('mgr1', '789', 'mgr', 'one', 'mgr1@gmail.com', 2);
insert into ers_users (ers_username, ers_password , user_first_name, user_last_name, user_email, user_role_id) values ('mgr2', '789', 'mgr', 'two', 'mgr2@gmail.com', 2);
--some user role data
insert into ers_user_roles (user_role) values ('employee');
insert into ers_user_roles (user_role) values ('manager');
--get user by id
select * from ers_users where ers_users_id = 4;
--get all employees
select * from ers_users 
join ers_user_roles 
on ers_users.user_role_id = ers_user_roles.ers_user_role_id 
where ers_user_roles.user_role = 'employee';
--update user info
update ers_users urs 
set ers_username = 'wills',
	ers_password = '456s',
	user_first_name = 'wills',
	user_last_name = 'smiths',
	user_email = 'wills@gmail.com'
where ers_users_id = 5;
--insert reimbursement request
insert into ers_reimbursement 
(reimb_amount, reimb_description, reimb_author, reimb_status_id, reimb_type_id)
values (150.0, 'housing', 4, 1, 1);
insert into ers_reimbursement 
(reimb_amount, reimb_description, reimb_author, reimb_status_id, reimb_type_id)
values (50.0, 'lunch', 4, 1, 3);
insert into ers_reimbursement 
(reimb_amount, reimb_description, reimb_author, reimb_status_id, reimb_type_id)
values (200.0, 'flat tire', 5, 1, 4);
insert into ers_reimbursement 
(reimb_amount, reimb_description, reimb_author, reimb_status_id, reimb_type_id)
values (300.0, 'flight ticket', 5, 1, 2);
--insert type
insert into ers_reimbursement_type (reimb_type) values ('LODGING');
insert into ers_reimbursement_type (reimb_type) values ('TRAVEL');
insert into ers_reimbursement_type (reimb_type) values ('FOOD');
insert into ers_reimbursement_type (reimb_type) values ('OTHER');
--insert status
insert into ers_reimbursement_status (reimb_status) values('Pending');
insert into ers_reimbursement_status (reimb_status) values('Accepted');
insert into ers_reimbursement_status (reimb_status) values('Rejected');

--employee view pending/resolved request
select r.reimb_description, rs.reimb_status 
from ers_reimbursement r
join ers_reimbursement_status rs
on r.reimb_status_id = rs.reimb_status_id 
where r.reimb_author = 4;

--update time trigger function
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.reimb_resolved = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--create the trigger
CREATE TRIGGER reimb_resolved
BEFORE UPDATE ON ers_reimbursement
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

--manager approve request
update ers_reimbursement 
set reimb_resolver = 6,
	reimb_status_id = 2,
	reimb_resolved = now()
where reimb_id = 2;

--manager reject request
update ers_reimbursement 
set reimb_resolver = 6,
	reimb_status_id = 3,
	reimb_resolved = now()
where reimb_id = 3;

--get employee status by id
select * from ers_reimbursement 
where reimb_author = 4;

--get employee status by status
select * from ers_reimbursement 
where reimb_status_id = 1;